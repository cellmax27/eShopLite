@page "/"  
@using Store.Services

<PageTitle>Home</PageTitle>  

<h1>Home</h1>  

Welcome to the best e-commerce platform in the world - eShopLite!  

<h2>Authentification</h2>  
<EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit" FormName="LoginForm"">
    <div>  
        <label for="loginName">Nom d'utilisateur :</label>  
        <InputText id="loginName" @bind-Value="loginModel.Name" />  
        <ValidationMessage For="@(() => loginModel.Name)" />  
    </div>  
    <div>  
        <label for="password">Mot de passe :</label>  
        <InputText id="password" @bind-Value="loginModel.Password" type="password" />  
        <ValidationMessage For="@(() => loginModel.Password)" />  
    </div>  
    <button type="submit">Se connecter</button>  
</EditForm>  

@code {
    private LoginModel loginModel = new LoginModel();  

    // Inject the authentication service
    //[Inject]
    //private UserService authenticationService { get; set; }  

    // Inject the HttpContextAccessor to access HttpContext
    //[Inject]
    //private IHttpContextAccessor httpContextAccessor { get; set; }

    // Mark the method as async and change its return type to Task
    private async Task HandleValidSubmit()  
    {  
        try  
        {  
            // Logique d'authentification ici  
            Console.WriteLine($"Authentification de {loginModel.Name} avec le mot de passe {loginModel.Password}");  

            // Retrieve the current HttpContext
            //var httpContext = httpContextAccessor.HttpContext;

            // Call the authentication service with HttpContext
            await loginModel.OnPostAsync();

            // Si l'authentification réussit, vous pouvez rediriger l'utilisateur vers une autre page ou afficher un message de succès.  
        }  
        catch (Exception ex)  
        {  
            Console.WriteLine($"Erreur lors de l'authentification : {ex.Message}");  
        }  
    }  
}
