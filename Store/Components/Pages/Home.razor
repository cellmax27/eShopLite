@page "/"  
@using DataEntities
@using Store.Services
@inject UserService UserService
@inject IConfiguration Configuration
@inject AuthService AuthService

<PageTitle>Home</PageTitle>  

<h1>Home</h1>

Welcome to the best e-commerce platform in the world - eShopLite!  

<h2>Authentification</h2>

<EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit" FormName="LoginForm">
    <DataAnnotationsValidator />
    <!-- <ValidationSummary /> -->
    <div>  
        <label for="loginName">Nom d'utilisateur :</label>  
        <InputText id="loginName" class="form-control" @bind-Value="loginModel.Name" />
        <ValidationMessage For="@(() => loginModel.Name)" />  
    </div>  
    <div>  
        <label for="password">Mot de passe :</label>  
        <InputText id="password" class="form-control" @bind-Value="loginModel.Password" type="password" />
        <ValidationMessage For="@(() => loginModel.Password)" />  
    </div>  
    <button type="submit">Se connecter</button>  
</EditForm>  


@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private LoginModel loginModel = new LoginModel();
    private string? errorMessage;

    private async Task HandleValidSubmit() 
    {    
         List<User>? _users;

        try  
        {  
            Console.WriteLine($"Authentification de {loginModel.Name} avec le mot de passe {loginModel.Password}");  

            // Call the authentication service with HttpContext
            _users = await AuthService.GetUsersAsync();

            //await loginModel.OnPostAsync();

            // Si l'authentification réussit, vous pouvez rediriger l'utilisateur vers une autre page ou afficher un message de succès.  
            Console.WriteLine($"Authentification OK !");
        }  
        catch (Exception ex)  
        {  
            Console.WriteLine($"Erreur lors de l'authentification : {ex.Message}");  
        }  
    }  
}
